/******************************************************************************/
/* Include necessory packages                                                 */

include "output/utils.sk";
include "output/StatsUtilList.sk";

/******************************************************************************/
/* Global Control Variables                                                   */
int CASPER_NUM_OUTVARS = 1;

// Input variables decl
int yMean;
bit loop0;

/******************************************************************************/
/* Main function to verify the two results generated are equal                */

harness void main(int[6] intSet){
	// Initialize output variables.
	int ssr0 = 0;
	int ssr = intSet[5];

	// Initialize input data and variables
    int[3] fit;
	fit[0] = intSet[3];
	fit[1] = intSet[2];
	fit[2] = intSet[1];
	
    // Initialize input broadcast variables
    yMean = intSet[4];
	loop0 = false;
	
    // Initialize loop counters
    int i0 = 0;
	int i = intSet[0];

	// Verification code
	assert loopInvariant(fit,0,0,0,0);
	if(loopInvariant(fit,ssr,0,i,0) && (i<3)) {
		int ind_ssr = ssr;
		ind_ssr = (ssr+((fit[i]-yMean)*(fit[i]-yMean)));
		int ind_i = i;
		ind_i = (i+1);
		assert loopInvariant(fit,ind_ssr,0,ind_i,0);
	}
	if(loopInvariant(fit,ssr,0,i,0) && !(i<3)) {
		assert postCondition(fit,ssr,0,i,0);
	}
}

/******************************************************************************/
/* Verification functions                                                     */

bit postCondition(int[3] fit, int ssr, int ssr0, int i, int i0){
	int [1] casper_r;
	casper_r[0] = ssr;
	return reduce(fit, ssr, ssr0, i, i0) == casper_r;
}

bit loopInvariant(int[3] fit, int ssr, int ssr0, int i, int i0){
	int [1] casper_r;
	casper_r[0] = ssr;
	return 0 <= i && i <= 3 && reduce(fit, ssr, ssr0, i, i0) == casper_r;
}

/******************************************************************************/
/* MapReduce Implementation                                                   */

generator int intMapGenerator(int[3] fit, int i){
	int _int_terminal0 = {| i | yMean | fit[i] |};
	int _int_terminal1 = {| i | yMean | fit[i] |};
	int _int_terminal2 = {| i | yMean | fit[i] |};
	int _int_terminal3 = {| i | yMean | fit[i] |};
	int _int_terminal4 = ??;
	int _int_terminal5 = ??;
	int c = ??(6);
	if(c==0){ return _int_terminal0; }
	if(c==1){ return (_int_terminal0 * _int_terminal1); }
	if(c==2){ return (_int_terminal0 * (_int_terminal1 * _int_terminal2)); }
	if(c==3){ return (_int_terminal0 * (_int_terminal1 + _int_terminal2)); }
	if(c==4){ return (_int_terminal0 * (_int_terminal1 - _int_terminal2)); }
	if(c==5){ return ((_int_terminal0 * _int_terminal1) * (_int_terminal2 * _int_terminal3)); }
	if(c==6){ return ((_int_terminal0 * _int_terminal1) * (_int_terminal2 + _int_terminal3)); }
	if(c==7){ return ((_int_terminal0 * _int_terminal1) * (_int_terminal2 - _int_terminal3)); }
	if(c==8){ return ((_int_terminal0 + _int_terminal1) * (_int_terminal2 + _int_terminal3)); }
	if(c==9){ return ((_int_terminal0 + _int_terminal1) * (_int_terminal2 - _int_terminal3)); }
	if(c==10){ return ((_int_terminal0 - _int_terminal1) * (_int_terminal2 - _int_terminal3)); }
	if(c==11){ return (_int_terminal0 + _int_terminal1); }
	if(c==12){ return (_int_terminal0 + (_int_terminal1 * _int_terminal2)); }
	if(c==13){ return (_int_terminal0 + (_int_terminal1 + _int_terminal2)); }
	if(c==14){ return (_int_terminal0 + (_int_terminal1 - _int_terminal2)); }
	if(c==15){ return ((_int_terminal0 * _int_terminal1) + (_int_terminal2 * _int_terminal3)); }
	if(c==16){ return ((_int_terminal0 * _int_terminal1) + (_int_terminal2 + _int_terminal3)); }
	if(c==17){ return ((_int_terminal0 * _int_terminal1) + (_int_terminal2 - _int_terminal3)); }
	if(c==18){ return ((_int_terminal0 + _int_terminal1) + (_int_terminal2 + _int_terminal3)); }
	if(c==19){ return ((_int_terminal0 + _int_terminal1) + (_int_terminal2 - _int_terminal3)); }
	if(c==20){ return ((_int_terminal0 - _int_terminal1) + (_int_terminal2 - _int_terminal3)); }
	if(c==21){ return (_int_terminal0 - _int_terminal1); }
	if(c==22){ return (_int_terminal0 - (_int_terminal1 * _int_terminal2)); }
	if(c==23){ return (_int_terminal0 - (_int_terminal1 + _int_terminal2)); }
	if(c==24){ return (_int_terminal0 - (_int_terminal1 - _int_terminal2)); }
	if(c==25){ return ((_int_terminal0 * _int_terminal1) - _int_terminal2); }
	if(c==26){ return ((_int_terminal0 * _int_terminal1) - (_int_terminal2 * _int_terminal3)); }
	if(c==27){ return ((_int_terminal0 * _int_terminal1) - (_int_terminal2 + _int_terminal3)); }
	if(c==28){ return ((_int_terminal0 * _int_terminal1) - (_int_terminal2 - _int_terminal3)); }
	if(c==29){ return ((_int_terminal0 + _int_terminal1) - _int_terminal2); }
	if(c==30){ return ((_int_terminal0 + _int_terminal1) - (_int_terminal2 * _int_terminal3)); }
	if(c==31){ return ((_int_terminal0 + _int_terminal1) - (_int_terminal2 + _int_terminal3)); }
	if(c==32){ return ((_int_terminal0 + _int_terminal1) - (_int_terminal2 - _int_terminal3)); }
	if(c==33){ return ((_int_terminal0 - _int_terminal1) - _int_terminal2); }
	if(c==34){ return ((_int_terminal0 - _int_terminal1) - (_int_terminal2 * _int_terminal3)); }
	if(c==35){ return ((_int_terminal0 - _int_terminal1) - (_int_terminal2 + _int_terminal3)); }
	if(c==36){ return ((_int_terminal0 - _int_terminal1) - (_int_terminal2 - _int_terminal3)); }
	
}

void map (int[3] fit, int i, ref int[CASPER_NUM_OUTVARS] keys0, ref int[CASPER_NUM_OUTVARS] values0)
{
  	keys0[0] = ??;
	values0[0] = intMapGenerator(fit, i);
	
}

generator int intReduceGenerator(int val1, int val2){
	int _int_terminal0 = {| val1 | val2 | yMean |};
	int _int_terminal1 = {| val1 | val2 | yMean |};
	int _int_terminal2 = {| val1 | val2 | yMean |};
	int _int_terminal3 = {| val1 | val2 | yMean |};
	int _int_terminal4 = ??;
	int _int_terminal5 = ??;
	int c = ??(6);
	if(c==0){ return _int_terminal0; }
	if(c==1){ return (_int_terminal0 * _int_terminal1); }
	if(c==2){ return (_int_terminal0 * (_int_terminal1 * _int_terminal2)); }
	if(c==3){ return (_int_terminal0 * (_int_terminal1 + _int_terminal2)); }
	if(c==4){ return (_int_terminal0 * (_int_terminal1 - _int_terminal2)); }
	if(c==5){ return ((_int_terminal0 * _int_terminal1) * (_int_terminal2 * _int_terminal3)); }
	if(c==6){ return ((_int_terminal0 * _int_terminal1) * (_int_terminal2 + _int_terminal3)); }
	if(c==7){ return ((_int_terminal0 * _int_terminal1) * (_int_terminal2 - _int_terminal3)); }
	if(c==8){ return ((_int_terminal0 + _int_terminal1) * (_int_terminal2 + _int_terminal3)); }
	if(c==9){ return ((_int_terminal0 + _int_terminal1) * (_int_terminal2 - _int_terminal3)); }
	if(c==10){ return ((_int_terminal0 - _int_terminal1) * (_int_terminal2 - _int_terminal3)); }
	if(c==11){ return (_int_terminal0 + _int_terminal1); }
	if(c==12){ return (_int_terminal0 + (_int_terminal1 * _int_terminal2)); }
	if(c==13){ return (_int_terminal0 + (_int_terminal1 + _int_terminal2)); }
	if(c==14){ return (_int_terminal0 + (_int_terminal1 - _int_terminal2)); }
	if(c==15){ return ((_int_terminal0 * _int_terminal1) + (_int_terminal2 * _int_terminal3)); }
	if(c==16){ return ((_int_terminal0 * _int_terminal1) + (_int_terminal2 + _int_terminal3)); }
	if(c==17){ return ((_int_terminal0 * _int_terminal1) + (_int_terminal2 - _int_terminal3)); }
	if(c==18){ return ((_int_terminal0 + _int_terminal1) + (_int_terminal2 + _int_terminal3)); }
	if(c==19){ return ((_int_terminal0 + _int_terminal1) + (_int_terminal2 - _int_terminal3)); }
	if(c==20){ return ((_int_terminal0 - _int_terminal1) + (_int_terminal2 - _int_terminal3)); }
	if(c==21){ return (_int_terminal0 - _int_terminal1); }
	if(c==22){ return (_int_terminal0 - (_int_terminal1 * _int_terminal2)); }
	if(c==23){ return (_int_terminal0 - (_int_terminal1 + _int_terminal2)); }
	if(c==24){ return (_int_terminal0 - (_int_terminal1 - _int_terminal2)); }
	if(c==25){ return ((_int_terminal0 * _int_terminal1) - _int_terminal2); }
	if(c==26){ return ((_int_terminal0 * _int_terminal1) - (_int_terminal2 * _int_terminal3)); }
	if(c==27){ return ((_int_terminal0 * _int_terminal1) - (_int_terminal2 + _int_terminal3)); }
	if(c==28){ return ((_int_terminal0 * _int_terminal1) - (_int_terminal2 - _int_terminal3)); }
	if(c==29){ return ((_int_terminal0 + _int_terminal1) - _int_terminal2); }
	if(c==30){ return ((_int_terminal0 + _int_terminal1) - (_int_terminal2 * _int_terminal3)); }
	if(c==31){ return ((_int_terminal0 + _int_terminal1) - (_int_terminal2 + _int_terminal3)); }
	if(c==32){ return ((_int_terminal0 + _int_terminal1) - (_int_terminal2 - _int_terminal3)); }
	if(c==33){ return ((_int_terminal0 - _int_terminal1) - _int_terminal2); }
	if(c==34){ return ((_int_terminal0 - _int_terminal1) - (_int_terminal2 * _int_terminal3)); }
	if(c==35){ return ((_int_terminal0 - _int_terminal1) - (_int_terminal2 + _int_terminal3)); }
	if(c==36){ return ((_int_terminal0 - _int_terminal1) - (_int_terminal2 - _int_terminal3)); }
	
}

int init_ssr(){
	return {| 0 | 1 |};
}

int reduce_ssr(int val1, int val2){
	return intReduceGenerator(val1, val2);
}

int merge_ssr(int val1, int val2){
	return {| val1 | val1+val2 |};
}


int [1] reduce (int[3] fit, int ssr, int ssr0, int i, int i0) {
	int [1] casper_r;
	casper_r[0] = init_ssr();
	
	for (int casper_i = i0; casper_i < i; ++casper_i)
	{
		int[CASPER_NUM_OUTVARS] keys0;
		int[CASPER_NUM_OUTVARS] values0;
		
		int num_pairs = CASPER_NUM_OUTVARS;

		map(fit, casper_i, keys0, values0);

		for (int casper_j = 0; casper_j < num_pairs; ++casper_j)
		{ 
	  		int key0 = keys0[casper_j];
	
	  		if(key0 == 0) {	}
	  		else if (key0 == 1){ casper_r[0] = reduce_ssr(casper_r[0], values0[casper_j]); }
	  		else{ assert 0; }
		} 
	}

	casper_r[0] = merge_ssr(casper_r[0],ssr0);
	

	return casper_r;
}