/******************************************************************************/
/* Include necessory packages                                                 */

include "output/utils.sk";
include "output/Sum.sk";
include "output/CasperDataRecord.sk";
include "output/CasperDataRecord.sk";

/******************************************************************************/
/* Global Control Variables                                                   */
int CASPER_NUM_OUTVARS = 1;

bit[37] reduceExp0 = {false};
bit[3] _term_flag_int_terminal2_reduce0 = {false};
bit[3] _term_flag_int_terminal3_reduce0 = {false};
bit[3] _term_flag_int_terminal1_reduce0 = {false};
bit[3] _term_flag_int_terminal0_reduce0 = {false};
bit[37] mapExp_v0 = {false};
bit[4] _term_flag_int_terminal0_map_v0 = {false};
bit[4] _term_flag_int_terminal1_map_v0 = {false};
bit[4] _term_flag_int_terminal3_map_v0 = {false};
bit[4] _term_flag_int_terminal2_map_v0 = {false};


// Input variables decl
bit loop0;

/******************************************************************************/
/* Main function to verify the two results generated are equal                */

harness void main(int[8] intSet, int csg_test_val1, int csg_test_val2){
	// Initialize output variables.
	int dist0 = 0;
	int dist = intSet[7];

	// Initialize input data and variables
    CasperDataRecord[3] casper_data_set;
	casper_data_set[0] = new CasperDataRecord();
	casper_data_set[0].v1 = intSet[6];
	casper_data_set[0].v2 = intSet[5];
	casper_data_set[1] = new CasperDataRecord();
	casper_data_set[1].v1 = intSet[4];
	casper_data_set[1].v2 = intSet[3];
	casper_data_set[2] = new CasperDataRecord();
	casper_data_set[2].v1 = intSet[2];
	casper_data_set[2].v2 = intSet[1];
	
    // Initialize input broadcast variables
    CASPER_TRUE = true;
    CASPER_FALSE = false;
    loop0 = false;
	
    // Initialize loop counters
    int i0 = 0;
	int i = intSet[0];

	// Verification code
	assert loopInvariant(casper_data_set,dist0,0,i0,0);
	if(loopInvariant(casper_data_set,dist,0,i,0) && (i<3)) {
		int ind_i = i;
		ind_i = (i+1);
		int ind_dist = dist;
		ind_dist = (dist+((casper_data_set[i].v1-casper_data_set[i].v2)*(casper_data_set[i].v1-casper_data_set[i].v2)));
		assert loopInvariant(casper_data_set,ind_dist,dist0,ind_i,i0);
		
		if(mapExp_v0[10] && reduceExp0[3]) assert false;
		if(mapExp_v0[10] && reduceExp0[12]) assert false;
		if(mapExp_v0[10] && reduceExp0[32]) assert false;
		if(mapExp_v0[10] && reduceExp0[15]) assert false;
		if(mapExp_v0[10] && reduceExp0[11]) assert false;
		
	}
	if(loopInvariant(casper_data_set,dist,0,i,0) && !(i<3)) {
		assert postCondition(casper_data_set,dist,0,i,0);
	}

	assert (reduce_dist(csg_test_val1,csg_test_val2) == reduce_dist(csg_test_val2,csg_test_val1)) || (reduce_dist(csg_test_val1,csg_test_val2) == csg_test_val2 && reduce_dist(csg_test_val2,csg_test_val1) == csg_test_val1);
	
}

/******************************************************************************/
/* Verification functions                                                     */

bit postCondition(CasperDataRecord[3] casper_data_set, int dist, int dist0, int i, int i0){
	int [1] casper_r;
	casper_r[0] = dist;
	return reduce(casper_data_set, dist, dist0, i, i0) == casper_r;
}

bit loopInvariant(CasperDataRecord[3] casper_data_set, int dist, int dist0, int i, int i0){
	int [1] casper_r;
	casper_r[0] = dist;
	return 0 <= i && i <= 3 && reduce(casper_data_set, dist, dist0, i, i0) == casper_r;
}

/******************************************************************************/
/* MapReduce Implementation                                                   */

generator int intMapGenerator_v0(CasperDataRecord[3] casper_data_set, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_v0[0] =  true; _int_terminal0 = i; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_v0[1] =  true; _int_terminal0 = casper_data_set[i].v1; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_v0[2] =  true; _int_terminal0 = casper_data_set[i].v2; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_map_v0[3] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_v0[0] =  true; _int_terminal1 = i; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_v0[1] =  true; _int_terminal1 = casper_data_set[i].v1; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_v0[2] =  true; _int_terminal1 = casper_data_set[i].v2; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_map_v0[3] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int _int_terminal2;
	int  _int_terminal2c = ??(2);
	if(_int_terminal2c == 0) { _term_flag_int_terminal2_map_v0[0] =  true; _int_terminal2 = i; }
	else if(_int_terminal2c == 1) { _term_flag_int_terminal2_map_v0[1] =  true; _int_terminal2 = casper_data_set[i].v1; }
	else if(_int_terminal2c == 2) { _term_flag_int_terminal2_map_v0[2] =  true; _int_terminal2 = casper_data_set[i].v2; }
	else if(_int_terminal2c == 3) { _term_flag_int_terminal2_map_v0[3] =  true; _int_terminal2 = ??; assert _int_terminal2 != 0; }
	else { assert false; }
	int _int_terminal3;
	int  _int_terminal3c = ??(2);
	if(_int_terminal3c == 0) { _term_flag_int_terminal3_map_v0[0] =  true; _int_terminal3 = i; }
	else if(_int_terminal3c == 1) { _term_flag_int_terminal3_map_v0[1] =  true; _int_terminal3 = casper_data_set[i].v1; }
	else if(_int_terminal3c == 2) { _term_flag_int_terminal3_map_v0[2] =  true; _int_terminal3 = casper_data_set[i].v2; }
	else if(_int_terminal3c == 3) { _term_flag_int_terminal3_map_v0[3] =  true; _int_terminal3 = ??; assert _int_terminal3 != 0; }
	else { assert false; }
	int c = ??(6);
	if(c==0){ mapExp_v0[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_v0[1]=true; return ((_int_terminal0) * (_int_terminal1)); }
	else if(c==2){ mapExp_v0[2]=true; return ((_int_terminal0) * ((_int_terminal1) * (_int_terminal2))); }
	else if(c==3){ mapExp_v0[3]=true; return ((_int_terminal0) * ((_int_terminal1) + (_int_terminal2))); }
	else if(c==4){ mapExp_v0[4]=true; return ((_int_terminal0) * ((_int_terminal1) - (_int_terminal2))); }
	else if(c==5){ mapExp_v0[5]=true; return (((_int_terminal0) * (_int_terminal1)) * ((_int_terminal2) * (_int_terminal3))); }
	else if(c==6){ mapExp_v0[6]=true; return (((_int_terminal0) * (_int_terminal1)) * ((_int_terminal2) + (_int_terminal3))); }
	else if(c==7){ mapExp_v0[7]=true; return (((_int_terminal0) * (_int_terminal1)) * ((_int_terminal2) - (_int_terminal3))); }
	else if(c==8){ mapExp_v0[8]=true; return (((_int_terminal0) + (_int_terminal1)) * ((_int_terminal2) + (_int_terminal3))); }
	else if(c==9){ mapExp_v0[9]=true; return (((_int_terminal0) + (_int_terminal1)) * ((_int_terminal2) - (_int_terminal3))); }
	else if(c==10){ mapExp_v0[10]=true; return (((_int_terminal0) - (_int_terminal1)) * ((_int_terminal2) - (_int_terminal3))); }
	else if(c==11){ mapExp_v0[11]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else if(c==12){ mapExp_v0[12]=true; return ((_int_terminal0) + ((_int_terminal1) * (_int_terminal2))); }
	else if(c==13){ mapExp_v0[13]=true; return ((_int_terminal0) + ((_int_terminal1) + (_int_terminal2))); }
	else if(c==14){ mapExp_v0[14]=true; return ((_int_terminal0) + ((_int_terminal1) - (_int_terminal2))); }
	else if(c==15){ mapExp_v0[15]=true; return (((_int_terminal0) * (_int_terminal1)) + ((_int_terminal2) * (_int_terminal3))); }
	else if(c==16){ mapExp_v0[16]=true; return (((_int_terminal0) * (_int_terminal1)) + ((_int_terminal2) + (_int_terminal3))); }
	else if(c==17){ mapExp_v0[17]=true; return (((_int_terminal0) * (_int_terminal1)) + ((_int_terminal2) - (_int_terminal3))); }
	else if(c==18){ mapExp_v0[18]=true; return (((_int_terminal0) + (_int_terminal1)) + ((_int_terminal2) + (_int_terminal3))); }
	else if(c==19){ mapExp_v0[19]=true; return (((_int_terminal0) + (_int_terminal1)) + ((_int_terminal2) - (_int_terminal3))); }
	else if(c==20){ mapExp_v0[20]=true; return (((_int_terminal0) - (_int_terminal1)) + ((_int_terminal2) - (_int_terminal3))); }
	else if(c==21){ mapExp_v0[21]=true; return ((_int_terminal0) - (_int_terminal1)); }
	else if(c==22){ mapExp_v0[22]=true; return ((_int_terminal0) - ((_int_terminal1) * (_int_terminal2))); }
	else if(c==23){ mapExp_v0[23]=true; return ((_int_terminal0) - ((_int_terminal1) + (_int_terminal2))); }
	else if(c==24){ mapExp_v0[24]=true; return ((_int_terminal0) - ((_int_terminal1) - (_int_terminal2))); }
	else if(c==25){ mapExp_v0[25]=true; return (((_int_terminal0) * (_int_terminal1)) - (_int_terminal2)); }
	else if(c==26){ mapExp_v0[26]=true; return (((_int_terminal0) * (_int_terminal1)) - ((_int_terminal2) * (_int_terminal3))); }
	else if(c==27){ mapExp_v0[27]=true; return (((_int_terminal0) * (_int_terminal1)) - ((_int_terminal2) + (_int_terminal3))); }
	else if(c==28){ mapExp_v0[28]=true; return (((_int_terminal0) * (_int_terminal1)) - ((_int_terminal2) - (_int_terminal3))); }
	else if(c==29){ mapExp_v0[29]=true; return (((_int_terminal0) + (_int_terminal1)) - (_int_terminal2)); }
	else if(c==30){ mapExp_v0[30]=true; return (((_int_terminal0) + (_int_terminal1)) - ((_int_terminal2) * (_int_terminal3))); }
	else if(c==31){ mapExp_v0[31]=true; return (((_int_terminal0) + (_int_terminal1)) - ((_int_terminal2) + (_int_terminal3))); }
	else if(c==32){ mapExp_v0[32]=true; return (((_int_terminal0) + (_int_terminal1)) - ((_int_terminal2) - (_int_terminal3))); }
	else if(c==33){ mapExp_v0[33]=true; return (((_int_terminal0) - (_int_terminal1)) - (_int_terminal2)); }
	else if(c==34){ mapExp_v0[34]=true; return (((_int_terminal0) - (_int_terminal1)) - ((_int_terminal2) * (_int_terminal3))); }
	else if(c==35){ mapExp_v0[35]=true; return (((_int_terminal0) - (_int_terminal1)) - ((_int_terminal2) + (_int_terminal3))); }
	else if(c==36){ mapExp_v0[36]=true; return (((_int_terminal0) - (_int_terminal1)) - ((_int_terminal2) - (_int_terminal3))); }
	else { assert false; }
	
}



void map (CasperDataRecord[3] casper_data_set, int i, ref int[CASPER_NUM_OUTVARS] keys0, ref int[CASPER_NUM_OUTVARS] values0)
{
  	keys0[0] = ??;
	values0[0] = intMapGenerator_v0(casper_data_set, i);
	
}

generator int intReduceGenerator0(int val1, int val2){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_reduce0[0] =  true; _int_terminal0 = val1; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_reduce0[1] =  true; _int_terminal0 = val2; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_reduce0[2] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_reduce0[0] =  true; _int_terminal1 = val1; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_reduce0[1] =  true; _int_terminal1 = val2; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_reduce0[2] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int _int_terminal2;
	int  _int_terminal2c = ??(2);
	if(_int_terminal2c == 0) { _term_flag_int_terminal2_reduce0[0] =  true; _int_terminal2 = val1; }
	else if(_int_terminal2c == 1) { _term_flag_int_terminal2_reduce0[1] =  true; _int_terminal2 = val2; }
	else if(_int_terminal2c == 2) { _term_flag_int_terminal2_reduce0[2] =  true; _int_terminal2 = ??; assert _int_terminal2 != 0; }
	else { assert false; }
	int _int_terminal3;
	int  _int_terminal3c = ??(2);
	if(_int_terminal3c == 0) { _term_flag_int_terminal3_reduce0[0] =  true; _int_terminal3 = val1; }
	else if(_int_terminal3c == 1) { _term_flag_int_terminal3_reduce0[1] =  true; _int_terminal3 = val2; }
	else if(_int_terminal3c == 2) { _term_flag_int_terminal3_reduce0[2] =  true; _int_terminal3 = ??; assert _int_terminal3 != 0; }
	else { assert false; }
	int c = ??(6);
	if(c==0){ reduceExp0[0]=true; return (_int_terminal0); }
	else if(c==1){ reduceExp0[1]=true; return ((_int_terminal0) * (_int_terminal1)); }
	else if(c==2){ reduceExp0[2]=true; return ((_int_terminal0) * ((_int_terminal1) * (_int_terminal2))); }
	else if(c==3){ reduceExp0[3]=true; return ((_int_terminal0) * ((_int_terminal1) + (_int_terminal2))); }
	else if(c==4){ reduceExp0[4]=true; return ((_int_terminal0) * ((_int_terminal1) - (_int_terminal2))); }
	else if(c==5){ reduceExp0[5]=true; return (((_int_terminal0) * (_int_terminal1)) * ((_int_terminal2) * (_int_terminal3))); }
	else if(c==6){ reduceExp0[6]=true; return (((_int_terminal0) * (_int_terminal1)) * ((_int_terminal2) + (_int_terminal3))); }
	else if(c==7){ reduceExp0[7]=true; return (((_int_terminal0) * (_int_terminal1)) * ((_int_terminal2) - (_int_terminal3))); }
	else if(c==8){ reduceExp0[8]=true; return (((_int_terminal0) + (_int_terminal1)) * ((_int_terminal2) + (_int_terminal3))); }
	else if(c==9){ reduceExp0[9]=true; return (((_int_terminal0) + (_int_terminal1)) * ((_int_terminal2) - (_int_terminal3))); }
	else if(c==10){ reduceExp0[10]=true; return (((_int_terminal0) - (_int_terminal1)) * ((_int_terminal2) - (_int_terminal3))); }
	else if(c==11){ reduceExp0[11]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else if(c==12){ reduceExp0[12]=true; return ((_int_terminal0) + ((_int_terminal1) * (_int_terminal2))); }
	else if(c==13){ reduceExp0[13]=true; return ((_int_terminal0) + ((_int_terminal1) + (_int_terminal2))); }
	else if(c==14){ reduceExp0[14]=true; return ((_int_terminal0) + ((_int_terminal1) - (_int_terminal2))); }
	else if(c==15){ reduceExp0[15]=true; return (((_int_terminal0) * (_int_terminal1)) + ((_int_terminal2) * (_int_terminal3))); }
	else if(c==16){ reduceExp0[16]=true; return (((_int_terminal0) * (_int_terminal1)) + ((_int_terminal2) + (_int_terminal3))); }
	else if(c==17){ reduceExp0[17]=true; return (((_int_terminal0) * (_int_terminal1)) + ((_int_terminal2) - (_int_terminal3))); }
	else if(c==18){ reduceExp0[18]=true; return (((_int_terminal0) + (_int_terminal1)) + ((_int_terminal2) + (_int_terminal3))); }
	else if(c==19){ reduceExp0[19]=true; return (((_int_terminal0) + (_int_terminal1)) + ((_int_terminal2) - (_int_terminal3))); }
	else if(c==20){ reduceExp0[20]=true; return (((_int_terminal0) - (_int_terminal1)) + ((_int_terminal2) - (_int_terminal3))); }
	else if(c==21){ reduceExp0[21]=true; return ((_int_terminal0) - (_int_terminal1)); }
	else if(c==22){ reduceExp0[22]=true; return ((_int_terminal0) - ((_int_terminal1) * (_int_terminal2))); }
	else if(c==23){ reduceExp0[23]=true; return ((_int_terminal0) - ((_int_terminal1) + (_int_terminal2))); }
	else if(c==24){ reduceExp0[24]=true; return ((_int_terminal0) - ((_int_terminal1) - (_int_terminal2))); }
	else if(c==25){ reduceExp0[25]=true; return (((_int_terminal0) * (_int_terminal1)) - (_int_terminal2)); }
	else if(c==26){ reduceExp0[26]=true; return (((_int_terminal0) * (_int_terminal1)) - ((_int_terminal2) * (_int_terminal3))); }
	else if(c==27){ reduceExp0[27]=true; return (((_int_terminal0) * (_int_terminal1)) - ((_int_terminal2) + (_int_terminal3))); }
	else if(c==28){ reduceExp0[28]=true; return (((_int_terminal0) * (_int_terminal1)) - ((_int_terminal2) - (_int_terminal3))); }
	else if(c==29){ reduceExp0[29]=true; return (((_int_terminal0) + (_int_terminal1)) - (_int_terminal2)); }
	else if(c==30){ reduceExp0[30]=true; return (((_int_terminal0) + (_int_terminal1)) - ((_int_terminal2) * (_int_terminal3))); }
	else if(c==31){ reduceExp0[31]=true; return (((_int_terminal0) + (_int_terminal1)) - ((_int_terminal2) + (_int_terminal3))); }
	else if(c==32){ reduceExp0[32]=true; return (((_int_terminal0) + (_int_terminal1)) - ((_int_terminal2) - (_int_terminal3))); }
	else if(c==33){ reduceExp0[33]=true; return (((_int_terminal0) - (_int_terminal1)) - (_int_terminal2)); }
	else if(c==34){ reduceExp0[34]=true; return (((_int_terminal0) - (_int_terminal1)) - ((_int_terminal2) * (_int_terminal3))); }
	else if(c==35){ reduceExp0[35]=true; return (((_int_terminal0) - (_int_terminal1)) - ((_int_terminal2) + (_int_terminal3))); }
	else if(c==36){ reduceExp0[36]=true; return (((_int_terminal0) - (_int_terminal1)) - ((_int_terminal2) - (_int_terminal3))); }
	else { assert false; }
	
}



int init_dist(){
	return {| 0 | 1 |};
}

int reduce_dist(int val1, int val2){
	return intReduceGenerator0(val1, val2);
}

int merge_dist(int val1, int val2){
	return {| val1 | val1+val2 |};
}


int [1] reduce (CasperDataRecord[3] casper_data_set, int dist, int dist0, int i, int i0) {
	int [1] casper_r;
	casper_r[0] = init_dist();
	
	for (int casper_i = i0; casper_i < i; ++casper_i)
	{
		int[CASPER_NUM_OUTVARS] keys0;
		int[CASPER_NUM_OUTVARS] values0;
		
		int num_pairs = CASPER_NUM_OUTVARS;

		map(casper_data_set, casper_i, keys0, values0);

		for (int casper_j = 0; casper_j < num_pairs; ++casper_j)
		{ 
	  		int key0 = keys0[casper_j];
			
	  		if(key0 == 0) {	}
	  		else if (key0 == 1){ casper_r[0] = reduce_dist(casper_r[0], values0[casper_j]); }
			
	  		else{ assert 0; }
		} 
	}

	casper_r[0] = merge_dist(casper_r[0],dist0);
	

	return casper_r;
}