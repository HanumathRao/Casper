/******************************************************************************/
/* Include necessory packages                                                 */

include "output/utils.sk";
include "output/HistogramJava.sk";
include "output/Pixel.sk";

/******************************************************************************/
/* Global Control Variables                                                   */
int CASPER_NUM_OUTVARS = 3;

bit[2] mapExp_k1 = {false};
bit[2] mapExp_k2 = {false};
bit[3] _term_flag_int_terminal1_reduce0 = {false};
bit[5] _term_flag_int_terminal0_map_v2 = {false};
bit[3] _term_flag_int_terminal1_reduce1 = {false};
bit[3] _term_flag_int_terminal1_reduce2 = {false};
bit[5] _term_flag_int_terminal0_map_v1 = {false};
bit[2] mapExp_k0 = {false};
bit[5] _term_flag_int_terminal0_map_v0 = {false};
bit[5] _term_flag_int_terminal1_map_v2 = {false};
bit[3] _term_flag_int_terminal0_reduce1 = {false};
bit[3] _term_flag_int_terminal0_reduce0 = {false};
bit[3] _term_flag_int_terminal0_reduce2 = {false};
bit[5] _term_flag_int_terminal1_map_k2 = {false};
bit[5] _term_flag_int_terminal1_map_k1 = {false};
bit[5] _term_flag_int_terminal1_map_v0 = {false};
bit[5] _term_flag_int_terminal1_map_k0 = {false};
bit[5] _term_flag_int_terminal1_map_v1 = {false};
bit[2] reduceExp0 = {false};
bit[2] reduceExp2 = {false};
bit[2] reduceExp1 = {false};
bit[2] mapExp_v2 = {false};
bit[2] mapExp_v1 = {false};
bit[2] mapExp_v0 = {false};
bit[5] _term_flag_int_terminal0_map_k2 = {false};
bit[5] _term_flag_int_terminal0_map_k0 = {false};
bit[5] _term_flag_int_terminal0_map_k1 = {false};


// Input variables decl
bit loop0;

/******************************************************************************/
/* Main function to verify the two results generated are equal                */

harness void main(int[34] intSet, int csg_test_val1, int csg_test_val2){
	// Initialize output variables.
	int[4] hR0;
	hR0[0] = intSet[33];
	hR0[1] = intSet[32];
	hR0[2] = intSet[31];
	hR0[3] = intSet[30];
	int[4] hR;
	hR[0] = intSet[29];
	hR[1] = intSet[28];
	hR[2] = intSet[27];
	hR[3] = intSet[26];
	int[4] hG0;
	hG0[0] = intSet[25];
	hG0[1] = intSet[24];
	hG0[2] = intSet[23];
	hG0[3] = intSet[22];
	int[4] hG;
	hG[0] = intSet[21];
	hG[1] = intSet[20];
	hG[2] = intSet[19];
	hG[3] = intSet[18];
	int[4] hB0;
	hB0[0] = intSet[17];
	hB0[1] = intSet[16];
	hB0[2] = intSet[15];
	hB0[3] = intSet[14];
	int[4] hB;
	hB[0] = intSet[13];
	hB[1] = intSet[12];
	hB[2] = intSet[11];
	hB[3] = intSet[10];

	// Initialize input data and variables
    Pixel[3] image;
	image[0] = new Pixel();
	image[0].b = intSet[9];
	image[0].g = intSet[8];
	image[0].r = intSet[7];
	image[1] = new Pixel();
	image[1].b = intSet[6];
	image[1].g = intSet[5];
	image[1].r = intSet[4];
	image[2] = new Pixel();
	image[2].b = intSet[3];
	image[2].g = intSet[2];
	image[2].r = intSet[1];
	
    // Initialize input broadcast variables
    CASPER_TRUE = true;
    CASPER_FALSE = false;
    loop0 = false;
	
    // Initialize loop counters
    int i0 = 0;
	int i = intSet[0];

	// Verification code
	assert loopInvariant(image,hB0,hB0,hG0,hG0,hR0,hR0,i0,i0);
	if(loopInvariant(image,hB,hB0,hG,hG0,hR,hR0,i,i0) && (i<3)) {
		int[4] ind_hG = hG;
		ind_hG[image[i].g] = (hG[image[i].g]+1);
		int[4] ind_hR = hR;
		ind_hR[image[i].r] = (hR[image[i].r]+1);
		int[4] ind_hB = hB;
		ind_hB[image[i].b] = (hB[image[i].b]+1);
		int ind_i = i;
		ind_i = (i+1);
		assert loopInvariant(image,ind_hB,hB0,ind_hG,hG0,ind_hR,hR0,ind_i,i0);
		
		
	}
	if(loopInvariant(image,hB,hB0,hG,hG0,hR,hR0,i,i0) && !(i<3)) {
		assert postCondition(image,hB,hB0,hG,hG0,hR,hR0,i,0);
	}

	assert (reduce_hR(csg_test_val1,csg_test_val2) == reduce_hR(csg_test_val2,csg_test_val1)) || (reduce_hR(csg_test_val1,csg_test_val2) == csg_test_val2 && reduce_hR(csg_test_val2,csg_test_val1) == csg_test_val1);
	assert (reduce_hG(csg_test_val1,csg_test_val2) == reduce_hG(csg_test_val2,csg_test_val1)) || (reduce_hG(csg_test_val1,csg_test_val2) == csg_test_val2 && reduce_hG(csg_test_val2,csg_test_val1) == csg_test_val1);
	assert (reduce_hB(csg_test_val1,csg_test_val2) == reduce_hB(csg_test_val2,csg_test_val1)) || (reduce_hB(csg_test_val1,csg_test_val2) == csg_test_val2 && reduce_hB(csg_test_val2,csg_test_val1) == csg_test_val1);
	
}

/******************************************************************************/
/* Verification functions                                                     */

bit postCondition(Pixel[3] image, int[4] hB, int[4] hB0, int[4] hG, int[4] hG0, int[4] hR, int[4] hR0, int i, int i0){
	int [12] casper_r;
	casper_r[0] = hR[0];
	casper_r[1] = hR[1];
	casper_r[2] = hR[2];
	casper_r[3] = hR[3];
	casper_r[4] = hG[0];
	casper_r[5] = hG[1];
	casper_r[6] = hG[2];
	casper_r[7] = hG[3];
	casper_r[8] = hB[0];
	casper_r[9] = hB[1];
	casper_r[10] = hB[2];
	casper_r[11] = hB[3];
	return reduce(image, hR, hR0, hG, hG0, hB, hB0, i, i0) == casper_r;
}

bit loopInvariant(Pixel[3] image, int[4] hB, int[4] hB0, int[4] hG, int[4] hG0, int[4] hR, int[4] hR0, int i, int i0){
	int [12] casper_r;
	casper_r[0] = hR[0];
	casper_r[1] = hR[1];
	casper_r[2] = hR[2];
	casper_r[3] = hR[3];
	casper_r[4] = hG[0];
	casper_r[5] = hG[1];
	casper_r[6] = hG[2];
	casper_r[7] = hG[3];
	casper_r[8] = hB[0];
	casper_r[9] = hB[1];
	casper_r[10] = hB[2];
	casper_r[11] = hB[3];
	return i0 <= i && i <= 3 && reduce(image, hR, hR0, hG, hG0, hB, hB0, i, i0) == casper_r;
}

/******************************************************************************/
/* MapReduce Implementation                                                   */

generator int intMapGenerator_k0(Pixel[3] image, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(3);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_k0[0] =  true; _int_terminal0 = i; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_k0[1] =  true; _int_terminal0 = image[i].b; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_k0[2] =  true; _int_terminal0 = image[i].g; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_map_k0[3] =  true; _int_terminal0 = image[i].r; }
	else if(_int_terminal0c == 4) { _term_flag_int_terminal0_map_k0[4] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(3);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_k0[0] =  true; _int_terminal1 = i; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_k0[1] =  true; _int_terminal1 = image[i].b; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_k0[2] =  true; _int_terminal1 = image[i].g; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_map_k0[3] =  true; _int_terminal1 = image[i].r; }
	else if(_int_terminal1c == 4) { _term_flag_int_terminal1_map_k0[4] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_k0[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_k0[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intMapGenerator_v0(Pixel[3] image, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(3);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_v0[0] =  true; _int_terminal0 = i; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_v0[1] =  true; _int_terminal0 = image[i].b; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_v0[2] =  true; _int_terminal0 = image[i].g; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_map_v0[3] =  true; _int_terminal0 = image[i].r; }
	else if(_int_terminal0c == 4) { _term_flag_int_terminal0_map_v0[4] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(3);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_v0[0] =  true; _int_terminal1 = i; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_v0[1] =  true; _int_terminal1 = image[i].b; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_v0[2] =  true; _int_terminal1 = image[i].g; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_map_v0[3] =  true; _int_terminal1 = image[i].r; }
	else if(_int_terminal1c == 4) { _term_flag_int_terminal1_map_v0[4] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_v0[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_v0[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intMapGenerator_k1(Pixel[3] image, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(3);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_k1[0] =  true; _int_terminal0 = i; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_k1[1] =  true; _int_terminal0 = image[i].b; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_k1[2] =  true; _int_terminal0 = image[i].g; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_map_k1[3] =  true; _int_terminal0 = image[i].r; }
	else if(_int_terminal0c == 4) { _term_flag_int_terminal0_map_k1[4] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(3);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_k1[0] =  true; _int_terminal1 = i; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_k1[1] =  true; _int_terminal1 = image[i].b; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_k1[2] =  true; _int_terminal1 = image[i].g; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_map_k1[3] =  true; _int_terminal1 = image[i].r; }
	else if(_int_terminal1c == 4) { _term_flag_int_terminal1_map_k1[4] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_k1[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_k1[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intMapGenerator_v1(Pixel[3] image, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(3);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_v1[0] =  true; _int_terminal0 = i; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_v1[1] =  true; _int_terminal0 = image[i].b; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_v1[2] =  true; _int_terminal0 = image[i].g; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_map_v1[3] =  true; _int_terminal0 = image[i].r; }
	else if(_int_terminal0c == 4) { _term_flag_int_terminal0_map_v1[4] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(3);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_v1[0] =  true; _int_terminal1 = i; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_v1[1] =  true; _int_terminal1 = image[i].b; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_v1[2] =  true; _int_terminal1 = image[i].g; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_map_v1[3] =  true; _int_terminal1 = image[i].r; }
	else if(_int_terminal1c == 4) { _term_flag_int_terminal1_map_v1[4] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_v1[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_v1[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intMapGenerator_k2(Pixel[3] image, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(3);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_k2[0] =  true; _int_terminal0 = i; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_k2[1] =  true; _int_terminal0 = image[i].b; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_k2[2] =  true; _int_terminal0 = image[i].g; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_map_k2[3] =  true; _int_terminal0 = image[i].r; }
	else if(_int_terminal0c == 4) { _term_flag_int_terminal0_map_k2[4] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(3);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_k2[0] =  true; _int_terminal1 = i; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_k2[1] =  true; _int_terminal1 = image[i].b; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_k2[2] =  true; _int_terminal1 = image[i].g; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_map_k2[3] =  true; _int_terminal1 = image[i].r; }
	else if(_int_terminal1c == 4) { _term_flag_int_terminal1_map_k2[4] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_k2[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_k2[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intMapGenerator_v2(Pixel[3] image, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(3);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_v2[0] =  true; _int_terminal0 = i; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_v2[1] =  true; _int_terminal0 = image[i].b; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_v2[2] =  true; _int_terminal0 = image[i].g; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_map_v2[3] =  true; _int_terminal0 = image[i].r; }
	else if(_int_terminal0c == 4) { _term_flag_int_terminal0_map_v2[4] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(3);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_v2[0] =  true; _int_terminal1 = i; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_v2[1] =  true; _int_terminal1 = image[i].b; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_v2[2] =  true; _int_terminal1 = image[i].g; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_map_v2[3] =  true; _int_terminal1 = image[i].r; }
	else if(_int_terminal1c == 4) { _term_flag_int_terminal1_map_v2[4] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_v2[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_v2[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}



void map (Pixel[3] image, int i, ref int[CASPER_NUM_OUTVARS] keys0, ref int[CASPER_NUM_OUTVARS] keys1, ref int[CASPER_NUM_OUTVARS] values0)
{
  	keys0[0] = ??;
	keys1[0] = intMapGenerator_k0(image, i);
	values0[0] = intMapGenerator_v0(image, i);
	keys0[1] = ??;
	keys1[1] = intMapGenerator_k1(image, i);
	values0[1] = intMapGenerator_v1(image, i);
	keys0[2] = ??;
	keys1[2] = intMapGenerator_k2(image, i);
	values0[2] = intMapGenerator_v2(image, i);
	
}

generator int intReduceGenerator0(int val1, int val2){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_reduce0[0] =  true; _int_terminal0 = val1; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_reduce0[1] =  true; _int_terminal0 = val2; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_reduce0[2] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_reduce0[0] =  true; _int_terminal1 = val1; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_reduce0[1] =  true; _int_terminal1 = val2; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_reduce0[2] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ reduceExp0[0]=true; return (_int_terminal0); }
	else if(c==1){ reduceExp0[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intReduceGenerator1(int val1, int val2){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_reduce1[0] =  true; _int_terminal0 = val1; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_reduce1[1] =  true; _int_terminal0 = val2; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_reduce1[2] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_reduce1[0] =  true; _int_terminal1 = val1; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_reduce1[1] =  true; _int_terminal1 = val2; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_reduce1[2] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ reduceExp1[0]=true; return (_int_terminal0); }
	else if(c==1){ reduceExp1[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intReduceGenerator2(int val1, int val2){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_reduce2[0] =  true; _int_terminal0 = val1; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_reduce2[1] =  true; _int_terminal0 = val2; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_reduce2[2] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_reduce2[0] =  true; _int_terminal1 = val1; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_reduce2[1] =  true; _int_terminal1 = val2; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_reduce2[2] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ reduceExp2[0]=true; return (_int_terminal0); }
	else if(c==1){ reduceExp2[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}



int init_hR(int hR0){
	return {| 0 | 1 | hR0 |};
}

int init_hG(int hG0){
	return {| 0 | 1 | hG0 |};
}

int init_hB(int hB0){
	return {| 0 | 1 | hB0 |};
}

int reduce_hR(int val1, int val2){
	return intReduceGenerator0(val1, val2);
}

int reduce_hG(int val1, int val2){
	return intReduceGenerator1(val1, val2);
}

int reduce_hB(int val1, int val2){
	return intReduceGenerator2(val1, val2);
}

int merge_hR(int val1, int val2){
	return {| val1 | val1+val2 |};
}
int merge_hG(int val1, int val2){
	return {| val1 | val1+val2 |};
}
int merge_hB(int val1, int val2){
	return {| val1 | val1+val2 |};
}


int [12] reduce (Pixel[3] image, int[4] hR, int[4] hR0, int[4] hG, int[4] hG0, int[4] hB, int[4] hB0, int i, int i0) {
	int [12] casper_r;
	casper_r[0] = init_hR(hR0[0]);
	casper_r[1] = init_hR(hR0[1]);
	casper_r[2] = init_hR(hR0[2]);
	casper_r[3] = init_hR(hR0[3]);
	casper_r[4] = init_hG(hG0[0]);
	casper_r[5] = init_hG(hG0[1]);
	casper_r[6] = init_hG(hG0[2]);
	casper_r[7] = init_hG(hG0[3]);
	casper_r[8] = init_hB(hB0[0]);
	casper_r[9] = init_hB(hB0[1]);
	casper_r[10] = init_hB(hB0[2]);
	casper_r[11] = init_hB(hB0[3]);
	
	for (int casper_i = i0; casper_i < i; ++casper_i)
	{
		int[CASPER_NUM_OUTVARS] keys0;
		int[CASPER_NUM_OUTVARS] keys1;
		int[CASPER_NUM_OUTVARS] values0;
		
		int num_pairs = CASPER_NUM_OUTVARS;

		map(image, casper_i, keys0, keys1, values0);

		for (int casper_j = 0; casper_j < num_pairs; ++casper_j)
		{ 
	  		int key0 = keys0[casper_j];
			int key1 = keys1[casper_j];
			
	  		if(key0 == 0) {	}
	  		else if (key0 == 1 && key1 == 0){ casper_r[0] = reduce_hR(casper_r[0], values0[casper_j]); }
			else if (key0 == 1 && key1 == 1){ casper_r[1] = reduce_hR(casper_r[1], values0[casper_j]); }
			else if (key0 == 1 && key1 == 2){ casper_r[2] = reduce_hR(casper_r[2], values0[casper_j]); }
			else if (key0 == 1 && key1 == 3){ casper_r[3] = reduce_hR(casper_r[3], values0[casper_j]); }
			else if (key0 == 2 && key1 == 0){ casper_r[4] = reduce_hG(casper_r[4], values0[casper_j]); }
			else if (key0 == 2 && key1 == 1){ casper_r[5] = reduce_hG(casper_r[5], values0[casper_j]); }
			else if (key0 == 2 && key1 == 2){ casper_r[6] = reduce_hG(casper_r[6], values0[casper_j]); }
			else if (key0 == 2 && key1 == 3){ casper_r[7] = reduce_hG(casper_r[7], values0[casper_j]); }
			else if (key0 == 3 && key1 == 0){ casper_r[8] = reduce_hB(casper_r[8], values0[casper_j]); }
			else if (key0 == 3 && key1 == 1){ casper_r[9] = reduce_hB(casper_r[9], values0[casper_j]); }
			else if (key0 == 3 && key1 == 2){ casper_r[10] = reduce_hB(casper_r[10], values0[casper_j]); }
			else if (key0 == 3 && key1 == 3){ casper_r[11] = reduce_hB(casper_r[11], values0[casper_j]); }
			
	  		else{ assert 0; }
		} 
	}

	casper_r[0] = merge_hR(casper_r[0],hR0[0]);
	casper_r[1] = merge_hR(casper_r[1],hR0[1]);
	casper_r[2] = merge_hR(casper_r[2],hR0[2]);
	casper_r[3] = merge_hR(casper_r[3],hR0[3]);
	casper_r[4] = merge_hG(casper_r[4],hG0[0]);
	casper_r[5] = merge_hG(casper_r[5],hG0[1]);
	casper_r[6] = merge_hG(casper_r[6],hG0[2]);
	casper_r[7] = merge_hG(casper_r[7],hG0[3]);
	casper_r[8] = merge_hB(casper_r[8],hB0[0]);
	casper_r[9] = merge_hB(casper_r[9],hB0[1]);
	casper_r[10] = merge_hB(casper_r[10],hB0[2]);
	casper_r[11] = merge_hB(casper_r[11],hB0[3]);
	

	return casper_r;
}
