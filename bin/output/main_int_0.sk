/******************************************************************************/
/* Include necessory packages                                                 */

include "output/utils.sk";
include "output/Count.sk";

/******************************************************************************/
/* Global Control Variables                                                   */
int CASPER_NUM_OUTVARS = 1;

bit[2] reduceExp0 = {false};
bit[4] _term_flag_int_terminal1_reduce0 = {false};
bit[2] mapExp_v1 = {false};
bit[2] mapExp_v0 = {false};
bit[2] _term_flag_int_terminal0_map_v1 = {false};
bit[2] _term_flag_int_terminal0_map_v0 = {false};
bit[2] _term_flag_int_terminal0_map_c0 = {false};
bit[2] _term_flag_int_terminal1_map_c0 = {false};
bit[1] _term_flag_bit_terminal0_map_c0 = {false};
bit[1] _term_flag_bit_terminal1_map_c0 = {false};
bit[4] _term_flag_int_terminal0_reduce0 = {false};
bit[2] _term_flag_int_terminal1_map_v0 = {false};
bit[2] _term_flag_int_terminal1_map_v1 = {false};
bit[3] mapExp_c0 = {false};


// Input variables decl
bit loop0;

/******************************************************************************/
/* Main function to verify the two results generated are equal                */

harness void main(int[5] intSet){
	// Initialize output variables.
	int count0 = 0;
	int count = intSet[4];

	// Initialize input data and variables
    int[3] data;
	data[0] = intSet[3];
	data[1] = intSet[2];
	data[2] = intSet[1];
	
    // Initialize input broadcast variables
    CASPER_TRUE = true;
    CASPER_FALSE = false;
    loop0 = false;
	
    // Initialize loop counters
    int i0 = 0;
	int i = intSet[0];

	// Verification code
	assert loopInvariant(data,0,0,0,0);
	if(loopInvariant(data,count,0,i,0) && (i<3)) {
		int ind_count = count;
		ind_count = (count+1);
		int ind_i = i;
		ind_i = (i+1);
		assert loopInvariant(data,ind_count,0,ind_i,0);
		
		if(reduceExp0[1] && _term_flag_int_terminal0_reduce0[2] && _term_flag_int_terminal1_reduce0[0]) assert false;
		if(mapExp_v0[0] && reduceExp0[1]) assert false;
		if(reduceExp0[1] && _term_flag_int_terminal0_reduce0[0] && _term_flag_int_terminal1_reduce0[2]) assert false;
		if(reduceExp0[1]) assert false;
		
	}
	if(loopInvariant(data,count,0,i,0) && !(i<3)) {
		assert postCondition(data,count,0,i,0);
	}
}

/******************************************************************************/
/* Verification functions                                                     */

bit postCondition(int[3] data, int count, int count0, int i, int i0){
	int [1] casper_r;
	casper_r[0] = count;
	return reduce(data, count, count0, i, i0) == casper_r;
}

bit loopInvariant(int[3] data, int count, int count0, int i, int i0){
	int [1] casper_r;
	casper_r[0] = count;
	return 0 <= i && i <= 3 && reduce(data, count, count0, i, i0) == casper_r;
}

/******************************************************************************/
/* MapReduce Implementation                                                   */

generator bit bitMapGenerator_c0(int[3] data, int i){
	bit _bit_terminal0;
	int  _bit_terminal0c = ??(0);
	if(_bit_terminal0c == 0) { _term_flag_bit_terminal0_map_c0[0] =  true; _bit_terminal0 = loop0; }
	else { assert false; }
	bit _bit_terminal1;
	int  _bit_terminal1c = ??(0);
	if(_bit_terminal1c == 0) { _term_flag_bit_terminal1_map_c0[0] =  true; _bit_terminal1 = loop0; }
	else { assert false; }
	int _int_terminal0;
	int  _int_terminal0c = ??(1);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_c0[0] =  true; _int_terminal0 = data[i]; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_c0[1] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(1);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_c0[0] =  true; _int_terminal1 = data[i]; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_c0[1] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(2);
	if(c==0){ mapExp_c0[0]=true; return (_bit_terminal0); }
	else if(c==1){ mapExp_c0[1]=true; return CASPER_TRUE; }
	else if(c==2){ mapExp_c0[2]=true; return CASPER_FALSE; }
	else { assert false; }
	
}

generator int intMapGenerator_v0(int[3] data, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(1);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_v0[0] =  true; _int_terminal0 = data[i]; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_v0[1] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(1);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_v0[0] =  true; _int_terminal1 = data[i]; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_v0[1] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_v0[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_v0[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}

generator int intMapGenerator_v1(int[3] data, int i){
	int _int_terminal0;
	int  _int_terminal0c = ??(1);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_v1[0] =  true; _int_terminal0 = data[i]; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_v1[1] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(1);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_v1[0] =  true; _int_terminal1 = data[i]; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_v1[1] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_v1[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_v1[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}



void map (int[3] data, int i, ref int[CASPER_NUM_OUTVARS] keys0, ref int[CASPER_NUM_OUTVARS] values0, ref int[CASPER_NUM_OUTVARS] values1)
{
  	if(bitMapGenerator_c0(data, i)){
		keys0[0] = ??;
		values0[0] = intMapGenerator_v0(data, i);
		values1[0] = intMapGenerator_v1(data, i);
	}
}

generator int intReduceGenerator0(int val1, int val2, int val3){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_reduce0[0] =  true; _int_terminal0 = val1; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_reduce0[1] =  true; _int_terminal0 = val2; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_reduce0[2] =  true; _int_terminal0 = val3; }
	else if(_int_terminal0c == 3) { _term_flag_int_terminal0_reduce0[3] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_reduce0[0] =  true; _int_terminal1 = val1; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_reduce0[1] =  true; _int_terminal1 = val2; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_reduce0[2] =  true; _int_terminal1 = val3; }
	else if(_int_terminal1c == 3) { _term_flag_int_terminal1_reduce0[3] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ reduceExp0[0]=true; return (_int_terminal0); }
	else if(c==1){ reduceExp0[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}



int init_count(){
	return {| 0 | 1 |};
}

int reduce_count(int val1, int val2, int val3){
	return intReduceGenerator0(val1, val2, val3);
}

int merge_count(int val1, int val2){
	return {| val1 | val1+val2 |};
}


int [1] reduce (int[3] data, int count, int count0, int i, int i0) {
	int [1] casper_r;
	casper_r[0] = init_count();
	
	for (int casper_i = i0; casper_i < i; ++casper_i)
	{
		int[CASPER_NUM_OUTVARS] keys0;
		int[CASPER_NUM_OUTVARS] values0;
		int[CASPER_NUM_OUTVARS] values1;
		
		int num_pairs = CASPER_NUM_OUTVARS;

		map(data, casper_i, keys0, values0, values1);

		for (int casper_j = 0; casper_j < num_pairs; ++casper_j)
		{ 
	  		int key0 = keys0[casper_j];
			
	  		if(key0 == 0) {	}
	  		else if (key0 == 1){ casper_r[0] = reduce_count(casper_r[0], values0[casper_j],values1[casper_j]); }
			
	  		else{ assert 0; }
		} 
	}

	casper_r[0] = merge_count(casper_r[0],count0);
	

	return casper_r;
}