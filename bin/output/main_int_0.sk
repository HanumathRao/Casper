/******************************************************************************/
/* Include necessory packages                                                 */

include "output/utils.sk";
include "output/Sum.sk";

/******************************************************************************/
/* Global Control Variables                                                   */
int CASPER_NUM_OUTVARS = 1;

bit[3] _term_flag_int_terminal1_map_v0 = {false};
bit[2] mapExp_v0 = {false};
bit[3] _term_flag_int_terminal0_map_v0 = {false};
bit[1] mapExp_c0 = {false};
bit[3] _term_flag_int_terminal0_reduce0 = {false};
bit[1] _term_flag_bit_terminal1_map_c0 = {false};
bit[2] reduceExp0 = {false};
bit[3] _term_flag_int_terminal0_map_c0 = {false};
bit[3] _term_flag_int_terminal1_map_c0 = {false};
bit[1] _term_flag_bit_terminal0_map_c0 = {false};
bit[3] _term_flag_int_terminal1_reduce0 = {false};


// Input variables decl

/******************************************************************************/
/* Main function to verify the two results generated are equal                */

harness void main(int[14] intSet, int csg_test_val1, int csg_test_val2){
	// Initialize output variables.
	int sum0 = 0;
	int sum = intSet[13];

	// Initialize input data and variables
    int[3] data;
	data[0] = intSet[12];
	data[1] = intSet[11];
	data[2] = intSet[10];
	
    // Initialize input broadcast variables
    CASPER_TRUE = true;
    CASPER_FALSE = false;
    
    // Initialize loop counters
    int casper_index0 = 0;
	int casper_index = intSet[9];

	// Verification code
	assert loopInvariant(data,sum0,sum0,casper_index0,casper_index0);
	if(loopInvariant(data,sum,sum0,casper_index,casper_index0) && (casper_index<3)) {
		assert loopInvariant(data,(sum+data[casper_index]),sum0,(casper_index+1),casper_index0);
		
		
	}
	if(loopInvariant(data,sum,sum0,casper_index,casper_index0) && !(casper_index<3)) {
		assert postCondition(data,sum,0,casper_index,0);
	}
}

/******************************************************************************/
/* Verification functions                                                     */

bit postCondition(int[3] data, int sum, int sum0, int casper_index, int casper_index0){
	int [1] casper_r;
	casper_r[0] = sum;
	return reduce(data, sum, sum0, casper_index, casper_index0) == casper_r;
}

bit loopInvariant(int[3] data, int sum, int sum0, int casper_index, int casper_index0){
	int [1] casper_r;
	casper_r[0] = sum;
	return casper_index0 <= casper_index && casper_index <= 3 && reduce(data, sum, sum0, casper_index, casper_index0) == casper_r;
}

/******************************************************************************/
/* MapReduce Implementation                                                   */

generator bit booleanMapGenerator_c0(int[3] data, int casper_index){
	bit _bit_terminal0;
	int  _bit_terminal0c = ??(0);
	if(_bit_terminal0c == 0) { _term_flag_bit_terminal0_map_c0[0] =  true; _bit_terminal0 = CASPER_FALSE; }
	else { assert false; }
	bit _bit_terminal1;
	int  _bit_terminal1c = ??(0);
	if(_bit_terminal1c == 0) { _term_flag_bit_terminal1_map_c0[0] =  true; _bit_terminal1 = CASPER_FALSE; }
	else { assert false; }
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_c0[0] =  true; _int_terminal0 = casper_index; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_c0[1] =  true; _int_terminal0 = data[casper_index]; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_c0[2] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_c0[0] =  true; _int_terminal1 = casper_index; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_c0[1] =  true; _int_terminal1 = data[casper_index]; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_c0[2] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(0);
	if(c==0){ mapExp_c0[0]=true; return (_bit_terminal0); }
	else { assert false; }
	
}

generator int intMapGenerator_v0(int[3] data, int casper_index){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_map_v0[0] =  true; _int_terminal0 = casper_index; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_map_v0[1] =  true; _int_terminal0 = data[casper_index]; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_map_v0[2] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_map_v0[0] =  true; _int_terminal1 = casper_index; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_map_v0[1] =  true; _int_terminal1 = data[casper_index]; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_map_v0[2] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ mapExp_v0[0]=true; return (_int_terminal0); }
	else if(c==1){ mapExp_v0[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}



void map (int[3] data, int casper_index, ref int[CASPER_NUM_OUTVARS] keys0, ref int[CASPER_NUM_OUTVARS] values0)
{
  	int c0 = ??(1);
	if(c0==0){
		keys0[0] = ??;
		values0[0] = intMapGenerator_v0(data, casper_index);
	} else {
		if(booleanMapGenerator_c0(data, casper_index)){
			keys0[0] = ??;
			values0[0] = intMapGenerator_v0(data, casper_index);
		}
	}
}

generator int intReduceGenerator0(int val1, int val2){
	int _int_terminal0;
	int  _int_terminal0c = ??(2);
	if(_int_terminal0c == 0) { _term_flag_int_terminal0_reduce0[0] =  true; _int_terminal0 = val1; }
	else if(_int_terminal0c == 1) { _term_flag_int_terminal0_reduce0[1] =  true; _int_terminal0 = val2; }
	else if(_int_terminal0c == 2) { _term_flag_int_terminal0_reduce0[2] =  true; _int_terminal0 = ??; assert _int_terminal0 != 0; }
	else { assert false; }
	int _int_terminal1;
	int  _int_terminal1c = ??(2);
	if(_int_terminal1c == 0) { _term_flag_int_terminal1_reduce0[0] =  true; _int_terminal1 = val1; }
	else if(_int_terminal1c == 1) { _term_flag_int_terminal1_reduce0[1] =  true; _int_terminal1 = val2; }
	else if(_int_terminal1c == 2) { _term_flag_int_terminal1_reduce0[2] =  true; _int_terminal1 = ??; assert _int_terminal1 != 0; }
	else { assert false; }
	int c = ??(1);
	if(c==0){ reduceExp0[0]=true; return (_int_terminal0); }
	else if(c==1){ reduceExp0[1]=true; return ((_int_terminal0) + (_int_terminal1)); }
	else { assert false; }
	
}



int init_sum(int sum0){
	return {| 0 | 1 | sum0 |};
}

int reduce_sum(int val1, int val2){
	return intReduceGenerator0(val1, val2);
}

int merge_sum(int val1, int val2){
	return {| val1 | val1+val2 |};
}


int [1] reduce (int[3] data, int sum, int sum0, int casper_index, int casper_index0) {
	int [1] casper_r;
	casper_r[0] = init_sum(sum0);
	
	for (int casper_i = casper_index0; casper_i < casper_index; ++casper_i)
	{
		int[CASPER_NUM_OUTVARS] keys0;
		int[CASPER_NUM_OUTVARS] values0;
		
		int num_pairs = CASPER_NUM_OUTVARS;

		map(data, casper_i, keys0, values0);

		for (int casper_j = 0; casper_j < num_pairs; ++casper_j)
		{ 
	  		int key0 = keys0[casper_j];
			
	  		if(key0 == 0) {	}
	  		else if (key0 == 1){ casper_r[0] = reduce_sum(casper_r[0], values0[casper_j]); }
			
	  		else{ assert 0; }
		} 
	}

	casper_r[0] = merge_sum(casper_r[0],sum0);
	

	return casper_r;
}
