bit casper_str_equal(int casper_a, int casper_b){
	return casper_a == casper_b;
}

generator bit[32] casper_genRandBitVec(){
	bit[32] casper_val;
	casper_val[0] = {| 0 | 1 |};
	casper_val[1] = {| 0 | 1 |};
	casper_val[2] = {| 0 | 1 |};
	casper_val[3] = {| 0 | 1 |};
	casper_val[4] = {| 0 | 1 |};
	casper_val[5] = {| 0 | 1 |};
	casper_val[6] = {| 0 | 1 |};
	casper_val[7] = {| 0 | 1 |};
	casper_val[8] = {| 0 | 1 |};
	casper_val[9] = {| 0 | 1 |};
	casper_val[10] = {| 0 | 1 |};
	casper_val[11] = {| 0 | 1 |};
	casper_val[12] = {| 0 | 1 |};
	casper_val[13] = {| 0 | 1 |};
	casper_val[14] = {| 0 | 1 |};
	casper_val[15] = {| 0 | 1 |};
	casper_val[16] = {| 0 | 1 |};
	casper_val[17] = {| 0 | 1 |};
	casper_val[18] = {| 0 | 1 |};
	casper_val[19] = {| 0 | 1 |};
	casper_val[20] = {| 0 | 1 |};
	casper_val[21] = {| 0 | 1 |};
	casper_val[22] = {| 0 | 1 |};
	casper_val[23] = {| 0 | 1 |};
	casper_val[24] = {| 0 | 1 |};
	casper_val[25] = {| 0 | 1 |};
	casper_val[26] = {| 0 | 1 |};
	casper_val[27] = {| 0 | 1 |};
	casper_val[28] = {| 0 | 1 |};
	casper_val[29] = {| 0 | 1 |};
	casper_val[30] = {| 0 | 1 |};
	casper_val[31] = {| 0 | 1 |};
	return casper_val;
}

int casper_math_pow(int casper_a, int casper_b){
	if(casper_b == 0)
		return 1;
	if(casper_b == 1)
		return casper_a;
	if(casper_b == 2)
		return casper_a*casper_a;
	if(casper_b == 3)
		return casper_a*casper_a*casper_a;
	if(casper_b == 4)
		return casper_a*casper_a*casper_a*casper_a;
	if(casper_b == 5)
		return casper_a*casper_a*casper_a*casper_a*casper_a;
	if(casper_b == 6)
		return casper_a*casper_a*casper_a*casper_a*casper_a*casper_a;
	if(casper_b == 7)
		return casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a;
	if(casper_b == 8)
		return casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a;
	if(casper_b == 9)
		return casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a;
	if(casper_b == 10)
		return casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a*casper_a;
}

bit CASPER_TRUE;
bit CASPER_FALSE;