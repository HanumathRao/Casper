/******************************************************************************/
/* Include necessory packages                                                 */

include "output/utils.sk";
<include-libs>
/******************************************************************************/
/* Global Control Variables                                                   */
int CASPER_NUM_OUTVARS = <num-out-vars>;

<decl-block-arrays>

// Input variables decl
<decl-broadcast-vars>
/******************************************************************************/
/* Main function to verify the two results generated are equal                */

harness void main(<main-args-decl>){
	// Initialize output variables.
	<output-vars-initialize>

	// Initialize input data and variables
    <input-data-initialize>
    // Initialize input broadcast variables
    CASPER_TRUE = true;
    CASPER_FALSE = false;
    <input-vars-initialize>
    // Initialize loop counters
    <loop-counters-initialize>

	// Verification code
	<verif-conditions><reduce-csg-test>
}

/******************************************************************************/
/* Verification functions                                                     */

bit postCondition(<post-cond-args-decl>){
	<output-type> [<r-size>] casper_r;
	<post-cond-body>
}

bit loopInvariant(<loop-inv-args-decl>){
	<output-type> [<r-size>] casper_r;
	<loop-inv-body>
}

/******************************************************************************/
/* MapReduce Implementation                                                   */

<map-generators>

void map (<map-args-decl>)
{
  	<map-emits>
}

<reduce-generator>

<init-functions>

<reduce-functions><merge-functions>

<output-type> [<r-size>] reduce (<reduce-args-decl>) {
	<output-type> [<r-size>] casper_r;
	<casper-r-init>
	for (int casper_i = <lc>0; casper_i < <lc>; ++casper_i)
	{
		<init-keys-vals>
		int num_pairs = CASPER_NUM_OUTVARS;

		map(<map-args-call>);

		for (int casper_j = 0; casper_j < num_pairs; ++casper_j)
		{ 
	  		<init-keys>
	  		if(key0 == 0) {	}
	  		<reduce-by-key>
	  		else{ assert 0; }
		} 
	}

	<merge-r>

	return casper_r;
}